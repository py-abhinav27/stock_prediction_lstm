# -*- coding: utf-8 -*-
"""Stock Price Prediction LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hZyPt1Qjojg4-AMK0dWifn-QGy1dmFxi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf

start = '2014-11-27'
stock = 'GOOG'
data = yf.download(stock,start)
#data

data.reset_index(inplace=True)
#data

ma_100_days = data.Close.rolling(100).mean()
#ma_100_days

plt.figure(figsize =(8,6))
plt.plot(ma_100_days,'r')
plt.plot(data.Close, 'g')
plt.show()

ma_200_days = data.Close.rolling(200).mean()

plt.plot(ma_100_days,'r')
plt.plot(ma_200_days,'b')
plt.plot(data.Close, 'g')
plt.show()

data.dropna(inplace=True)

train_data = pd.DataFrame(data.Close[0:int(len(data)*0.8)])
test_data = pd.DataFrame(data.Close[int(len(data)*0.8):len(data)])

#train_data.shape[0]

#test_data.shape[0]

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))

data_train_scale = scaler.fit_transform(train_data)

x = []
y = []

for i in range(100,data_train_scale.shape[0]):
  x.append(data_train_scale[i-100:i])
  y.append(data_train_scale[i,0])

x = np.array(x)
y = np.array(y)

from keras.layers import LSTM,Dropout,Dense
from keras.models import Sequential

model = Sequential()
model.add(LSTM(units = 50, activation='relu', return_sequences=True,input_shape = ((x.shape[1],1))))
model.add(Dropout(0.2))

model.add(LSTM(units=60, activation = 'relu',return_sequences=True))
model.add(Dropout(0.3))

model.add(LSTM(units = 80, activation = 'relu', return_sequences=True))
model.add(Dropout(0.4))

model.add(LSTM(units = 120, activation = 'relu'))
model.add(Dropout(0.5))

model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(x,y,epochs=50,batch_size=32,verbose=1)

#model.summary()

pas_100_days = train_data.tail(100)

data_test = pd.concat([pas_100_days,test_data],ignore_index =True)

data_test_scale = scaler.fit_transform(data_test)

x = []
y = []
for i in range(100,data_test_scale.shape[0]):
  x.append(data_test_scale[i-100:i])
  y.append(data_test_scale[i,0])
x,y = np.array(x),np.array(y)

y_pred = model.predict(x)

scale = 1/scaler.scale_

y_pred = y_pred*scale
y_test = y*scale

plt.figure(figsize=(8,6))
plt.plot(y_pred,'r', label = 'Predicted Price')
plt.plot(y_test,'g', label = 'Original Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()

model.save('Stock Predictions LSTM.keras')